# video_generator.py
import os
import requests
import datetime
import xml.etree.ElementTree as ET
import json
import hashlib
import time
# --- –î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from moviepy.editor import * 
# from your_tts_module import generate_yandex_audio_with_timings # –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
# ------------------------------------

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
RSS_URL = "https://raw.githubusercontent.com/–í–ê–®_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨/–í–ê–®_–†–ï–ü–û–ó–ò–¢–û–†–ò–ô/main/rss.xml" 
MEMORY_FILE = "video_memory.json"
MAX_RSS_AGE_HOURS = 2.5 # –ù–æ–≤–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Å—Ç–∞—Ä—à–µ 2.5 —á–∞—Å–æ–≤
MIN_ARTICLE_WORD_COUNT = 50 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –≤–∏–¥–µ–æ

# –°–µ–∫—Ä–µ—Ç—ã –¥–ª—è Yandex (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
YC_API_KEY = os.environ.get("YC_API_KEY", "").strip() 
YC_FOLDER_ID = os.environ.get("YC_FOLDER_ID", "").strip() 

# ================== –ü–ê–ú–Ø–¢–¨ ==================
def load_memory():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ö–µ—à–µ–π —Å—Ç–∞—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã."""
    try:
        with open(MEMORY_FILE, 'r', encoding='utf-8') as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_memory(published_hashes):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ö–µ—à–µ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π."""
    with open(MEMORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(list(published_hashes), f, ensure_ascii=False, indent=2)

# ================== TTS (–ó–ê–ì–õ–£–®–ö–ê) ==================
def generate_yandex_audio_with_timings(text, article_hash):
    """
    –ó–ê–ì–õ–£–®–ö–ê. –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å Yandex SpeechKit API 
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Ç—å –∫ –∞—É–¥–∏–æ + —Ç–∞–π–º–∏–Ω–≥–∏ —Å–ª–æ–≤.
    """
    if not YC_API_KEY or not YC_FOLDER_ID:
        print("‚ùå –ö–ª—é—á–∏ Yandex Cloud –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ê—É–¥–∏–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É:
        # –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MoviePy
        # —Å —ç—Ç–∏–º –∑–∞–≥–ª—É—à–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
        return None, None 

    print(f"   --> ‚öôÔ∏è –í—ã–∑–æ–≤ Yandex SpeechKit –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤...")
    # --- –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –ö–û–î –í–´–ó–û–í–ê YANDEX API (V3) –ë–£–î–ï–¢ –ó–î–ï–°–¨ ---
    # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å 'tts.v1.TextToSpeech/long_running_recognize' –∏–ª–∏ –∞–Ω–∞–ª–æ–≥ –¥–ª—è —Ç–∞–π–º–∏–Ω–≥–æ–≤!
    
    # –ü–†–ò–ú–ï–†: –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    temp_audio_path = f"audio_{article_hash}.mp3"
    # pydub.AudioSegment.silent(duration=5000).export(temp_audio_path, format="mp3") 
    
    # –ü–†–ò–ú–ï–† –í–û–ó–í–†–ê–¢–ê:
    # return temp_audio_path, [{"word": "–ü—Ä–∏–≤–µ—Ç", "start": 0.0, "end": 0.5}, ...] 
    return None, None # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

# ================== –ß–¢–ï–ù–ò–ï –ò –í–´–ë–û–† –°–¢–ê–¢–¨–ò ==================
def find_best_new_article(published_hashes):
    """–ß–∏—Ç–∞–µ—Ç RSS –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é (—Å–∞–º—É—é –Ω–æ–≤—É—é) —Å—Ç–∞—Ç—å—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞."""
    try:
        rss_response = requests.get(RSS_URL, timeout=15)
        rss_response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSS-—Ñ–∏–¥–∞: {e}")
        return None

    root = ET.fromstring(rss_response.content)
    channel = root.find('channel')
    
    candidate_article = None
    
    for item in channel.findall('item'):
        title = item.find('title').text
        pub_date_str = item.find('pubDate').text
        full_text_element = item.find('{http://news.yandex.ru}full-text')
        image_url_element = item.find('enclosure')
        
        if not title or not full_text_element: continue

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (—Ö–µ—à –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        article_hash = hashlib.sha256(title.encode('utf-8')).hexdigest()
        if article_hash in published_hashes: continue

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
        try:
            pub_date = datetime.datetime.strptime(pub_date_str, "%a, %d %b %Y %H:%M:%S GMT").replace(tzinfo=datetime.timezone.utc)
            age = datetime.datetime.now(datetime.timezone.utc) - pub_date
            if age.total_seconds() > MAX_RSS_AGE_HOURS * 3600: continue
        except ValueError:
            pass # –ï—Å–ª–∏ –¥–∞—Ç—É –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º –µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        full_text = full_text_element.text
        if len(full_text.split()) < MIN_ARTICLE_WORD_COUNT: continue

        # 4. –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —ç—Ç–æ –Ω–∞—à –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç (—Ç.–∫. RSS –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ –Ω–æ–≤–∏–∑–Ω–µ)
        candidate_article = {
            'title': title,
            'text': full_text,
            'image_url': image_url_element.get('url') if image_url_element is not None else None,
            'hash': article_hash
        }
        break # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π –Ω–æ–≤—ã–π) –ø–æ–¥—Ö–æ–¥—è—â–∏–π
        
    return candidate_article

# ================== –í–ò–î–ï–û –ú–û–ù–¢–ê–ñ (–ó–ê–ì–õ–£–®–ö–ê) ==================
def create_short_video(title, text, image_url, audio_path, word_timings):
    """
    –ó–ê–ì–õ–£–®–ö–ê. –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MoviePy –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è MP4.
    """
    if not audio_path or not word_timings:
        print("‚ùå –ù–µ—Ç –∞—É–¥–∏–æ –∏–ª–∏ —Ç–∞–π–º–∏–Ω–≥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        return None
    
    print(f"   --> üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ—Ä—è–¥–∞ –¥–ª—è: {title}...")
    
    # --- –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –ö–û–î –ú–û–ù–¢–ê–ñ–ê MOVIEPY –ë–£–î–ï–¢ –ó–î–ï–°–¨ ---
    # (MoviePy: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞, –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∞—É–¥–∏–æ, 
    #  —Ü–∏–∫–ª –ø–æ word_timings –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤)
    
    output_path = f"video_{candidate_article['hash']}.mp4"
    # clip.write_videofile(output_path, fps=24)
    
    print(f"   --> ‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
    return output_path

# ================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==================
def run_video_generator():
    published_hashes = load_memory()
    print(f"–ó–∞–ø—É—â–µ–Ω–æ. –í –ø–∞–º—è—Ç–∏ {len(published_hashes)} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ.")
    
    candidate = find_best_new_article(published_hashes)
    
    if not candidate:
        print(f"‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {MAX_RSS_AGE_HOURS} —á–∞—Å–∞.")
        return

    print(f"‚≠ê –ù–∞–π–¥–µ–Ω –ª—É—á—à–∏–π —Å—é–∂–µ—Ç: '{candidate['title']}'")
    
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏ —Ç–∞–π–º–∏–Ω–≥–æ–≤
    audio_path, word_timings = generate_yandex_audio_with_timings(candidate['text'], candidate['hash'])
    
    if not audio_path: return

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    video_path = create_short_video(
        candidate['title'], 
        candidate['text'], 
        candidate['image_url'], 
        audio_path, 
        word_timings
    )
    
    if not video_path: return

    # 3. –ü—É–±–ª–∏–∫–∞—Ü–∏—è (–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ post_to_youtube / post_to_tiktok)
    # post_to_youtube(video_path, candidate['title'])
    # post_to_tiktok(video_path, candidate['title'])

    # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    published_hashes.add(candidate['hash'])
    save_memory(published_hashes)
    print(f"‚úÖ –°—é–∂–µ—Ç '{candidate['title']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç—å –≤–∏–¥–µ–æ.")

if __name__ == "__main__":
    run_video_generator()
